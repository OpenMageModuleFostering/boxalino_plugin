<?php

/**
 * Class Boxalino_Intelligence_Block_Cart_Crosssell
 */
class Boxalino_Intelligence_Block_Cart_Crosssell extends Mage_Checkout_Block_Cart_Crosssell{

    /**
     * 
     */
    public function _construct()
    {
        $this->getItems(false);
        parent::_construct();
    }

    /**
     * @param bool $execute
     * @return array|null
     */
    public function getItems($execute = true){

        $bxHelperData = Mage::helper('intelligence');
        if($bxHelperData->isPluginEnabled() && $bxHelperData->isCrosssellEnabled()){
            $config = Mage::getStoreConfig('bxRecommendations/cart');
            $items = array();
            $products = array();
            
            foreach ($this->getQuote()->getAllItems() as $item){
                $product = $item->getProduct();
                if($product) {
                    $products[] = $product;
                }
            }

            $choiceId = (isset($config['widget']) && $config['widget'] != "") ? $config['widget'] : 'basket';
            try{
                $entity_ids = $bxHelperData->getAdapter()->getRecommendation(
                    $choiceId,
                    $products,
                    'basket',
                    $config['min'],
                    $config['max'],
                    $execute
                );
            }catch(\Exception $e){
                Mage::logException($e);
                return parent::getItems();
            }

            if(!$execute){
                return null;
            }

            if(empty($entity_ids)){
                return $items;
            }
            
            $itemCollection = Mage::getResourceModel('catalog/product_collection')
                ->addFieldToFilter('entity_id', $entity_ids)
                ->addAttributeToSelect('*');

            if (Mage::helper('catalog')->isModuleEnabled('Mage_Checkout')) {
                Mage::getResourceSingleton('checkout/cart')->addExcludeProductFilter($itemCollection,
                    Mage::getSingleton('checkout/session')->getQuoteId()
                );
                $this->_addProductAttributesAndPrices($itemCollection);
            }

            foreach ($itemCollection as $product){
                $product->setDoNotUseCategoryId(true);
                $items[] = $product;
            }

            return $items;
        }
        return parent::getItems(); // TODO: Change the autogenerated stub
    }

}